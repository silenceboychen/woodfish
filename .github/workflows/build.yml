name: Build and Release

# 触发条件：当推送 tag 时
on:
  push:
    tags:
      - 'v*'  # 匹配 v1.0.0, v2.1.3 等格式的 tag

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        
    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      # 安装依赖
      - name: Install dependencies
        run: npm install

      # macOS 需要导入开发者证书（如果有的话）
      - name: Import Developer ID Certificate (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # 这里可以添加 macOS 签名相关的配置
          # 如果没有开发者证书，electron-builder 会生成未签名的包
          echo "Building for macOS without code signing"

      # Linux 平台构建
      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          # 安装 Linux 构建依赖
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libgtk-3-dev libgbm-dev
          npm run dist
        env:
          CI: true

      # Windows 平台构建
      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: npm run dist
        env:
          CI: true

      # macOS 平台构建
      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: npm run dist
        env:
          CI: true
          # 如果要禁用公证，可以设置以下环境变量
          CSC_IDENTITY_AUTO_DISCOVERY: false

      # 上传构建产物
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: |
            dist/*.dmg
            dist/*.zip
            dist/*.exe
            dist/*.AppImage
            dist/*.deb
            dist/*.tar.gz
          retention-days: 7

  # 创建 GitHub Release
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 下载所有构建产物
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      # 整理文件结构
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # 复制所有构建产物到统一目录
          find ./artifacts -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" \) -exec cp {} ./release-assets/ \;
          ls -la ./release-assets/

      # 获取 tag 版本号
      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      # 生成发布说明
      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          ## 🎉 木鱼应用 ${{ steps.get_version.outputs.VERSION }}

          ### 📦 下载链接
          
          **macOS:**
          - \`.dmg\` - 适用于 macOS 的安装包
          - \`.zip\` - 便携版本
          
          **Windows:**
          - \`.exe\` - Windows 安装程序
          - \`-portable.exe\` - 便携版本
          
          **Linux:**
          - \`.AppImage\` - 通用 Linux 应用
          - \`.deb\` - Ubuntu/Debian 包
          
          ### 🔧 安装说明
          
          **macOS:** 下载 .dmg 文件，双击安装
          **Windows:** 下载 .exe 文件，运行安装
          **Linux:** 
          - AppImage: 下载后添加执行权限 \`chmod +x *.AppImage\`
          - Debian: \`sudo dpkg -i *.deb\`
          
          ### ⚠️ 注意事项
          - macOS 版本未经 Apple 公证，首次运行时可能需要在系统偏好设置中允许，如安装后无法使用，请尝试在终端中运行 \`xattr -d com.apple.quarantine /Applications/木鱼.app\`
          - Windows 版本可能触发 SmartScreen 警告，选择"仍要运行"即可
          
          ---
          
          感谢使用木鱼应用！🙏
          EOF
          
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 创建 Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: 木鱼应用 ${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          files: ./release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 清理任务
  cleanup:
    name: Cleanup
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Clean up artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            macos-latest-build
            ubuntu-latest-build
            windows-latest-build
          failOnError: false 